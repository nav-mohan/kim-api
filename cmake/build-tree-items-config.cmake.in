#
# KIM-API: An API for interatomic models
# Copyright (c) 2013--2022, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Richard Berger
#    Christoph Junghans
#    Ryan S. Elliott
#    Alexander Stukowski
#
# SPDX-License-Identifier: LGPL-2.1-or-later
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
#

#
# Release: This file is part of the kim-api-2.4.1 package.
#


# - KIM-API-ITEMS package for *build tree*
#
#  kim_api_items_setup_before_project()  - standard item configure, part 1
#  kim_api_items_setup_after_project()   - standard item configure, part 2
#


set(KIM_API_INSTALL_COLLECTION "SYSTEM" CACHE STRING "KIM API Collection in which to install items")
set_property(CACHE KIM_API_INSTALL_COLLECTION PROPERTY STRINGS SYSTEM)
mark_as_advanced(KIM_API_INSTALL_COLLECTION)

#
# Macro to perform any necessary standard configuration that must be completed
# BEFORE the user calls the 'project()' command
#
macro(kim_api_items_setup_before_project)
  set(_options "")
  set(_oneValueArgs ITEM_TYPE)
  set(_multiValueArgs "")
  cmake_parse_arguments(_before_setup "${_options}" "${_oneValueArgs}" "${_multiValueArgs}" ${ARGN})
  if(_before_setup_UNPARSED_ARGUMENTS)
    message(FATAL_ERROR "Unparsed arguments found in 'kim_api_items_setup_before_project'")
  endif()
  unset(_options)
  unset(_oneValueArgs)
  unset(_multiValueArgs)

  set(_known_item_types portableModel modelDriver simulatorModel)
  if(NOT ${_before_setup_ITEM_TYPE} IN_LIST _known_item_types)
    message(FATAL_ERROR "Unknown KIM API Item type")
  endif()
  unset(_known_item_types)

  # nothing else to do from the build tree...
endmacro(kim_api_items_setup_before_project)

#
# Macro to perform any necessary standard configuration that must be completed
# AFTER the user calls the 'project()' command
#
macro(kim_api_items_setup_after_project)
  set(_options "")
  set(_oneValueArgs ITEM_TYPE)
  set(_multiValueArgs "")
  cmake_parse_arguments(_after_setup "${_options}" "${_oneValueArgs}" "${_multiValueArgs}" ${ARGN})
  if(_after_setup_UNPARSED_ARGUMENTS)
    message(FATAL_ERROR "Unparsed arguments found in 'kim_api_items_setup_after_project'")
  endif()
  unset(_options)
  unset(_oneValueArgs)
  unset(_multiValueArgs)

  set(_known_item_types portableModel modelDriver simulatorModel)
  if(NOT ${_after_setup_ITEM_TYPE} IN_LIST _known_item_types)
    message(FATAL_ERROR "Unknown KIM API Item type")
  endif()
  unset(_known_item_types)

  # nothing else to do from the build tree...

  find_package(KIM-API 2.2 REQUIRED CONFIG)
endmacro(kim_api_items_setup_after_project)


include("${CMAKE_CURRENT_LIST_DIR}/kim-api-items-macros.cmake")

function(_determine_default_system_collection_install_prefix _item_type)
  if("${_item_type}" STREQUAL "")
    message(FATAL_ERROR "Empty item type provided.")
  endif()
  if("${_item_type}" STREQUAL "modelDriver")
    set(_dir_list "${KIM_API_SYSTEM_MODEL_DRIVERS_DIR}")
  elseif("${_item_type}" STREQUAL "portableModel")
    set(_dir_list "${KIM_API_SYSTEM_PORTABLE_MODELS_DIR}")
  elseif("${_item_type}" STREQUAL "simulatorModel")
    set(_dir_list "${KIM_API_SYSTEM_SIMULATOR_MODELS_DIR}")
  else()
    message(FATAL_ERROR "Unknown item type.")
  endif()
  string(REGEX REPLACE "^([^${KIM_API_PATH_SEPARATOR}]+).*" "\\1" _dir "${_dir_list}")
  string(REGEX REPLACE "^(\\$ORIGIN|\\\${ORIGIN})" "${CMAKE_INSTALL_FULL_LIBDIR}" _dir "${_dir}")
  if("${_dir}" STREQUAL "")
    message(FATAL_ERROR "Unable to determine KIM API item install prefix.")
  endif()
  set(_ITEM_INSTALL_PREFIX "${_dir}" PARENT_SCOPE)
endfunction(_determine_default_system_collection_install_prefix)
