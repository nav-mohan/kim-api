#!/bin/sh

#
# KIM-API: An API for interatomic models
# Copyright (c) 2013--2022, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#
# SPDX-License-Identifier: LGPL-2.1-or-later
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
#

#
# Release: This file is part of the kim-api-2.4.1 package.
#


# check for errors

if test $# -lt 4; then
  printf "usage: %s packagename major minor patch [prerelease]\n" $0
  printf "  eg., %s kim-api     2     0     0      beta.0\n" $0
  exit
fi

# DO IT

# goto the top level repo directory
cd "`git rev-parse --show-toplevel`"


master_branch="master"
devel_branch="devel"

# check that we're on the right branch
if test x"${devel_branch}" != x"`git rev-parse --abbrev-ref HEAD`"; then
  printf "Must be on the '${devel_branch}' branch to crate a package. "
  printf "Exiting.\n"
  exit
fi

# check that we're on a clean branch
if test ! x"" == x"`git diff-index --name-only HEAD`"; then
  printf "Local changes exist.  Must be on a clean commit. Exiting.\n"
  exit
fi

packagename=$1
major=$2
minor=$3
patch=$4
versionstring=${major}.${minor}.${patch}
if test $# -ge 5; then
  prerelease=$5
  versionstring=${versionstring}-${prerelease}
else
  prerelease=""
fi
fullpackagename=${packagename}-${versionstring}

# grab cmake project version string
cmake_project_version="`grep -E "^project\(" CMakeLists.txt | sed -e 's/.*VERSION *\([0-9.]*\).*/\1/'`"
cmake_major="`printf "${cmake_project_version}" | sed -e 's/\([0-9]*\)\..*/\1/'`"
cmake_minor="`printf "${cmake_project_version}" | sed -e 's/[^.]*\.\([0-9]*\)\..*/\1/'`"
cmake_patch="`printf "${cmake_project_version}" | sed -e 's/.*\.\([0-9]*\).*/\1/'`"

if test $major -ne ${cmake_major}; then
  printf "Major version mismatch with CMakeLists.txt\n";
  printf "exiting...\n";
  exit
fi
if test $minor -ne ${cmake_minor}; then
  printf "Minor version mismatch with CMakeLists.tst\n";
  printf "exiting...\n";
  exit
fi
if test $patch -ne ${cmake_patch}; then
  printf "Patch version mismatch with CMakeLists.txt\n";
  printf "exiting...\n";
  exit
fi


git checkout -b "b-v${versionstring}" HEAD
git tag -a -m"Git version for v${versionstring}" "v${versionstring}-git"

ed cmake/Modules/DefineVersionVariables.cmake > /dev/null 2>&1 <<EOF
,s/^set(PROJECT_VERSION_PRERELEASE *"\([^"]*\)"/set(PROJECT_VERSION_PRERELEASE "${prerelease}"/
w
EOF


# Change kim-api.git to release version string
# replace c /* */ comments
orig_string="kim-api-2.4.1 package.  "  # include trailing space to keep this from catching non /* */ comments
new_string="${fullpackagename} package."
num_spaces=`expr ${#new_string} - ${#orig_string}`
if test ${num_spaces} -le 0; then
  new_string="`printf -- '%-'${#orig_string}'s' \"${new_string}\"`"
else
  orig_string="`printf -- '%-'${#new_string}'s' \"${orig_string}\"`"
fi
orig_string="`printf -- "${orig_string}" | sed -e 's/[]\/$*.^[]/\\\\&/g'`"  # escape orig_string appropriately
for fl in `grep -l -r "${orig_string}" .`; do
  if test x"${fl}" != x"scripts/create-package"; then  # can't ed current script
    ed "${fl}" > /dev/null 2>&1 <<EOF
,s/${orig_string}/${new_string}/g
w
q
EOF
  fi
done
# replace the rest
for fl in `grep -l -r "kim-api\.git repository" .`; do
  if test x"${fl}" != x"scripts/create-package"; then  # can't ed current script
    ed "${fl}" > /dev/null 2>&1 <<EOF
,s/kim-api\.git repository/$fullpackagename package/g
w
q
EOF
  fi
done

# Change branch id in README.md links
ed "README.md" > /dev/null 2>&1 <<EOF
g/^\[/s/devel/master/g
w
q
EOF

printf "\n"
git add -u
git commit -m"Temporary commit holding v${versionstring} tree"
# the above may fail due to pre-commit hook.
if test $? -ne 0; then
  printf "Error: git failed to create commit 'Temporary commit holding v${versionstring} tree'.\n"
  printf "execute these commands to reset state:\n"
  printf "git tag -d v${versionstring}-git\n"
  printf "git restore --staged .\n"
  printf "git restore .\n"
  printf "git checkout devel\n"
  printf "git branch -D b-v${versionstring}\n"
  printf "\n"
  exit
fi
# the below command creates a merge commit with master_branch as the *first-parent* containing the release files
merge_commit="`git commit-tree -p "${master_branch}" -p "HEAD~" -m "Release commit for v${versionstring}" "HEAD^{tree}"`"
printf "\n"
git reset --hard "${merge_commit}"

git tag -a -m"Release version for v${versionstring}" "v${versionstring}"
git archive --format=tar --prefix="${fullpackagename}/" "v${versionstring}" \
  | xz > "${fullpackagename}.txz"

printf "\n"
git checkout "${devel_branch}"

printf "\n"
printf "\n"
printf "Created release commit, tag, and archive for v${versionstring}.\n"
printf "To complete the release process perform the following.\n"
printf "\n"
printf "  git checkout '${master_branch}'\n"
printf "  git merge 'b-v${versionstring}'\n"
printf "  git branch -d 'b-v${versionstring}'\n"
printf "  git push origin --tags '${master_branch}'\n"
printf "  git push github --tags '${master_branch}'\n"
printf "  git checkout '${devel_branch}'\n"
printf "  emacs CMakeLists.txt  # Bump version number to next patch value.\n"
printf "  git add CMakeLists.txt\n"
printf "  git commit  # message: Bump version to vX.Y.Z\n"
printf "  git push origin\n"
printf "  git push github\n"

printf "\n"
internal_notes="/Users/relliott/unison-sync/KIM/kim-api-release-process-notes/kim-api-internal-release-process-notes"
if test -f "${internal_notes}"; then
  source "${internal_notes}"
fi
